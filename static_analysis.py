import magic
import hashlib

class Static_Analysis:
    auto_run_methods = []

    def __init__(self, file):

        self.file = file
        self.run_static_analysis()
        
    
    #@classmethod
    #def auto_run(cls, function):
    #    cls.auto_run_methods.append(function)
    #    return function

    #@auto_run
    def report_file_type(self):
        """report what kind of file has been passed, eg exe, jpeg, .bin"""
        print("*** File type ***")
        fileTypeMagic = magic.from_file(self.file)
        fileTypeMagicFromBUgger = magic.from_buffer(open(self.file, "rb").read(2048))
        fileTypeMagicWithMime = magic.from_file(self.file, mime=True)

        print("***Information about the file ***")
        print(f"The file type is '{fileTypeMagic}'")
        print(f"Information from the first 2048 bytes: '{fileTypeMagicFromBUgger}")
        print(F"File information with Mine: '{fileTypeMagicWithMime}'")

        #TODO: add a option to check files from a compressed source
        fileUncompressed = magic.Magic(uncompress=True)
        fileUncompressed.from_file(self.file)
        print(f"Information from uncomressed file: '{fileUncompressed}'")
        return(fileTypeMagic)

    #@auto_run
    def fringer_printing(self):
        hashes = open(self.file, "rb").read()
        print("***Hashes of the file ***")
        print(f"md5 hash: '{hashlib.md5(hashes).hexdigest()}")
        print(f"sha256 hash: '{hashlib.sha256(hashes).hexdigest()}")
        print(f"sha1 hash: '{hashlib.sha1(hashes).hexdigest()}")
 



    def run_static_analysis(self):
        # List of functions to run
        functions_to_run = [
            self.report_file_type,
            self.fringer_printing
        ]
        for function in functions_to_run:
            function()  # Call each function in the list

from static_analysis import Static_Analysis
from vt_analysis import Virus_Total_Analysis
from strings import Strings
from extract_imports import Extract_Imports
from pe_analysis import PE_Anlaysis
from pathlib import Path
import argparse
import sys

def run_static_analysis():
    file_from_user = input("Enter the file path: ").strip()

    if is_it_a_file(file_from_user):

        try:
            static_analysis = Static_Analysis(file_from_user)
        except Exception as e:
            print(f"An error has occurred '{e}'")
    else:
        print("File does not exist.")

def run_virus_total():
        
        hash_from_user = input("Enter a hash: ").strip()
        vt_analysis = Virus_Total_Analysis(hash_from_user)
        vt_analysis.getInformationOnFile()

def run_extract_strings():
    file_from_user = input("Enter the file path: ").strip()
    if is_it_a_file(file_from_user):
        try:
            strings = Strings(file_from_user)
            strings.extract_strings()
        except Exception as e:
            print(f"An error has occurred '{e}'")
    else:
        print("File does not exist.")

def run_extract_imports():
    file_from_user = input("Enter the file path: ").strip()
    if is_it_a_file(file_from_user):
        try:
            imports = Extract_Imports(file_from_user)
            imports.extract_imports()
        except Exception as e:
            print(f"An error has occured '{e}'")
    else:
        print("File does not exist.")

def run_pe_analysis():
    file_from_user = input("Enter the file path: ").strip()
    if is_it_a_file(file_from_user): # and is_it_pe_file(file_from_user): TODO add a check to see if it is a PE file
        try:
            pe_analsysis = PE_Anlaysis(file_from_user)
        except Exception as e:
            print(f"An error has occured '{e}")


def is_it_a_file(file_from_user):
    file = Path(file_from_user)
    if file.exists():
        return True
    else:
        return False
if __name__ == "__main__":
    #main()

    parser = argparse.ArgumentParser(
        description="This script will take an object and an argument to run analysis against."
    )

    parser.add_argument("-S", "--static", dest="static",
                        default=None, help="Run static analysis on the file. Requires a file path", action="store_true")
    parser.add_argument("-vt","--virus-total", dest="virus_total",
                        default=None, help="Check the hash against virus total. Requires a hash", action="store_true")
    parser.add_argument("-st", "--extract-strings", dest="extract_strings",
                        default=None, help="Extract strings from the file. Requires a file path", action="store_true")
    parser.add_argument("-im", "--imports", dest="extract_imports",
                        default=None, help="Extracts import from the file. Requires a file path", action="store_true")
    parser.add_argument("-pe", "--pe", dest="pe",
                        default=None, help="Run PE analysis on file. Requires a file path", action="store_true")

    args = parser.parse_args()

    print("***Starting Haq Analysis ***")

    if args.static:
        print("Run static analysis against supplied file location")
        run_static_analysis()
        exit()
    
    if args.virus_total:
        print("Check virus total for the supplied hash")
        run_virus_total()
        exit()
    
    if args.extract_strings:
        print("Extract strings from supplied file")
        run_extract_strings()
        exit()
    if args.extract_imports:
        print("Extract imports from supplied file")
        run_extract_imports()
        exit()
    
    if args.pe:
        print("Run PE analysis against supplied file")
        run_pe_analysis()
        exit

import magic
import hashlib
import argparse
import json
import sys
import requests
import os
import pefile
import time
import ssdeep
 
def static_analysis():
 
	print("***Static information about {0}***\n".format(malwareFile))
 
	#----- Magic -----
	fMagic = magic.open(magic.MAGIC_NONE)
	fMagic.load()
 
	fileType = fMagic.file(malwareFile) 
	print("File type  - {0}\n".format(fileType))
 
	#----- Hash -----
	readMalwareFile = open(malwareFile,"rb").read()
 
	print("MD5 hash - {0}".format(hashlib.md5(readMalwareFile).hexdigest()))
	print("SHA256 hash - {0}".format(hashlib.sha256(readMalwareFile).hexdigest()))
	print("SHA1 hash - {0}\n".format(hashlib.sha1(readMalwareFile).hexdigest()))
 
def query_virus_total_api():
 
    sha256_hash_value = hashlib.sha256(readMalwareFile).hexdigest()
    print(sha256_hash_value)
    session = requests.Session()
    session.headers={'x-apikey':'KEY'}
    vt_url = "https://www.virustotal.com/api/v3/files/{0}".format(sha256_hash_value)
    vt_response = session.get(vt_url)
    json_response = vt_response.json()
    json_formatted = json.dumps(json_response, indent = 2)
    print(json_formatted)
 
def print_strings():
    print("made ie to print strings")
    os.system('strings {0}'.format(malwareFile))
 
def unpack_file():
    os.system('upx -d -o {0}_unpacked {0}'.format(malwareFile))
 
def print_imported_dll():
    for entry in pe_file.DIRECTORY_ENTRY_IMPORT:
        print("{0}".format(entry.dll))
        for dll_import in entry.imports:
            print("\t {0}".format(dll_import.name))
        else:
            print("\tord({0})".format(str(dll_import.ordinal)))
        print("\n")
 
def print_exported_dll():
    if hasattr(pe_file, 'DIRECTORY_ENTRY_EXPORT'):
        for export in pe_file.DIRECTORY_ENTRY_EXPORT.symbols:
            print("{0}".format(export.name))
    else:
        print("No export enitry found")
 
def print_pe_sections():  # TODO: Below is not printing in a visually pleasing format
    complie_timestamp = pe_file.FILE_HEADER.TimeDateStamp
    print(time.strftime("%Y-%m-%d %H:%M:%S", time.localtime(complie_timestamp)))
    for section in pe_file.sections:
        print("{0} {1} {2} {3}".format(section.Name,
            hex(section.VirtualAddress),
            hex(section.Misc_VirtualSize),
            section.SizeOfRawData))
 
def compare_files(second_malwareFile):
    hash_one = ssdeep.hash_from_file(malwareFile)
    print("ssdeep fuzzy hash for the first file: {0}".format(hash_one))
 
    hash_two = ssdeep.hash_from_file(second_malwareFile)
    print("ssdeep fuzzy hash for the second file: {0}".format(hash_two))
    print(ssdeep.compare(hash_one,hash_two))
 
 
parser = argparse.ArgumentParser("A script to pull static information from a passed in file, based on the book Malware Analysis by Monnappa K A")
parser.add_argument("-p","--target_path",help="Path to the file for static analysis")
parser.add_argument("-vt","--virus_total", action='store_true', help="Query Virus Total files API")
parser.add_argument("-ps","--print_strings", action='store_true', help="Print the strings of the given file, it will do a '-a'")
parser.add_argument("-up","--unpack",action='store_true', help="unpack a file")
parser.add_argument("-dlli","--ddl_imports", action='store_true',help="Show a list of DLL imports")
parser.add_argument("-dlle","--ddl_exports",action='store_true',help="Show a lift of DLL imports")
parser.add_argument("-pesec","--pe_sections",action='store_true',help="Display the file's PE table/section. It will show the complie timestamp, also")
parser.add_argument("-ssdc","--ssdeep_compare",help='Pass a second file with this argument to compare it to the first passed in file"')
args = parser.parse_args()
 
malwareFile = args.target_path
readMalwareFile = open(malwareFile,"rb").read()
try:
    pe_file = pefile.PE(malwareFile)
except pefile.PEformatError:
    print("There was a PE errorQ") # add more detail
 
 
if args.target_path:
    static_analysis()
 
    if args.virus_total:
        query_virus_total_api()
    elif args.print_strings:
        print_strings()
    elif args.unpack:
        unpack_file()
    elif args.ddl_imports:
        print_imported_dll()
    elif args.ddl_exports:
        print_exported_dll()
    elif args.pe_sections:
        print_pe_sections()
    elif  args.ssdeep_compare:
        print(args.ssdeep_compare)
        compare_files(args.ssdeep_compare)
 
else:
    print("Please specify a file path")
    parser.print_help()
 

import magic
import hashlib
import argparse
import json
import sys
import requests
import os
import pefile
 
def static_analysis():
 
        print("***Static information about {0}***\n".format(malwareFile))
 
        #----- Magic -----
        fMagic = magic.open(magic.MAGIC_NONE)
        fMagic.load()
 
        fileType = fMagic.file(malwareFile)
        print("File type  - {0}\n".format(fileType))
 
        #----- Hash -----
        readMalwareFile = open(malwareFile,"rb").read()
 
        print("MD5 hash - {0}".format(hashlib.md5(readMalwareFile).hexdigest()))
        print("SHA256 hash - {0}".format(hashlib.sha256(readMalwareFile).hexdigest()))
        print("SHA1 hash - {0}\n".format(hashlib.sha1(readMalwareFile).hexdigest()))
 
def query_virus_total_api():
   
    sha256_hash_value = hashlib.sha256(readMalwareFile).hexdigest()
    print(sha256_hash_value)
    session = requests.Session()
    session.headers={'x-apikey':'956538efd8111c274b47d4921ee797042f9caacc2dd3c2d9f4ae283390fdf638'} #IMPORT REMOVE THIS WHEN ADDED TO GITHUB
    vt_url = "https://www.virustotal.com/api/v3/files/{0}".format(sha256_hash_value)
    vt_response = session.get(vt_url)
    json_response = vt_response.json()
    json_formatted = json.dumps(json_response, indent = 2)
    print(json_formatted)
 
def print_strings():
    print("made ie to print strings")
    os.system('strings {0}'.format(malwareFile))
 
def unpack_file():
    os.system('upx -d -o {0}_unpacked {0}'.format(malwareFile))
 
def print_imported_dll():
    try:
        pe_file = pefile.PE(malwareFile)
    except pefile.PEformatError:
        print("There was a PE error2") # add more detail
 
    for entry in pe_file.DIRECTORY_ENTRY_IMPORT:
        print("{0}".format(entry.dll))
        for dll_import in entry.imports:
            print("\t {0}".format(dll_import.name))
        else:
            print("\tord({0})".format(str(dll_import.ordinal)))
        print("\n")
 
parser = argparse.ArgumentParser("A script to pull static information from a passed in file, based on the book Malware Analysis by Monnappa K A")
parser.add_argument("-p","--target_path",help="Path to the file for static analysis")
parser.add_argument("-vt","--virus_total", action='store_true', help="Query Virus Total files API")
parser.add_argument("-ps","--print_strings", action='store_true', help="Print the strings of the given file, it will do a '-a'")
parser.add_argument("-up","--unpack",action='store_true', help="unpack a file")
parser.add_argument("-dlli","--ddl_imports", action='store_true',help="Show a list of DLL imports")
args = parser.parse_args()
 
malwareFile = args.target_path
readMalwareFile = open(malwareFile,"rb").read()
 
if args.target_path:
    static_analysis()
 
    if args.virus_total:
        query_virus_total_api()
    elif args.print_strings:
        print_strings()
    elif args.unpack:
        unpack_file()
    elif args.ddl_imports:
        print_imported_dll()
else:
    print("Please specify a file path")
    parser.print_help()
